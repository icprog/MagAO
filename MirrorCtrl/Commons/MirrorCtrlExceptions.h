#ifndef MIRRORCTRLEXCEPTIONS_H_INCLUDED
#define MIRRORCTRLEXCEPTIONS_H_INCLUDED

#include "AOExcept.h"
#include "UdpConnection.h"

#include <string>
using namespace std;

/*
 * Root class for all exceptions of the mirror controller.
 * The exceptions derived from library's exceptions are abviousli excluded !
 */
class MirrorCtrlException: public AOException {
	public:
		MirrorCtrlException(string id, string m):AOException(m) { exception_id = id; }
		virtual ~MirrorCtrlException() {}
};

class MirrorControllerConstructionException: public MirrorCtrlException {
	public:
		MirrorControllerConstructionException(string m):MirrorCtrlException("MirrorControllerConstructionException", "Unable to construct the MirrorCtrl: " + m) {}
		virtual ~MirrorControllerConstructionException() {}
};


class MirrorControllerShutdownException: public MirrorCtrlException {
	public:
		MirrorControllerShutdownException():MirrorCtrlException("MirrorControllerShutdownException", "MirrorCtrl have been asked to shutdown") {}
		virtual ~MirrorControllerShutdownException() {}
};

class TimeoutExpiredException: public MirrorCtrlException {
	public:
		TimeoutExpiredException():MirrorCtrlException("TimeoutExpiredException", "A timout has expired") {}
		virtual ~TimeoutExpiredException() {}
};


// Exception generated by the AbstractBcuRequestManager
class AbstractBcuRequestManagerException: public MirrorCtrlException {
	public:
		AbstractBcuRequestManagerException(string id, string m):MirrorCtrlException(id, m) {}
		virtual ~AbstractBcuRequestManagerException() {}
};

// Exception generated by the BcuCommandHandler
class BcuCommandHandlerException: public AbstractBcuRequestManagerException {
	public:
		BcuCommandHandlerException(string m):AbstractBcuRequestManagerException("BcuCommandHandlerException", m) {}
		virtual ~BcuCommandHandlerException() {}
};

// Exception generated by the DiagnosticManager
class DiagnosticManagerException: public AbstractBcuRequestManagerException {
	public:
		DiagnosticManagerException(string m):AbstractBcuRequestManagerException("DiagnosticManagerException", m) {}
		virtual ~DiagnosticManagerException() {}
};


class DiagnosticManagerPoolException: public MirrorCtrlException {
	public:
		DiagnosticManagerPoolException(string m):MirrorCtrlException("DiagnosticManagerPoolException", m) {} 
		virtual ~DiagnosticManagerPoolException() {}
};

class UnexistingDiagnosticManagerException: public DiagnosticManagerPoolException {
	public:
		UnexistingDiagnosticManagerException():DiagnosticManagerPoolException("Trying to control an unexisting diagnostic manager") {}
		virtual ~UnexistingDiagnosticManagerException() {}
};

class DiagnosticManagerPoolStartException: public DiagnosticManagerPoolException {
	public:
		DiagnosticManagerPoolStartException():DiagnosticManagerPoolException("Diagnostic manager not started !") {}
		virtual ~DiagnosticManagerPoolStartException() {}
};



/*
 * This exception is thrown by the BcuRequestInfo constructor if isn't possible to 
 * attach to the shared memory. This happend when the client deallocate the shared
 * memory BEFORE the MirrorCtrl can attach to it.
 */
class InvalidSharedMemoryException: public MirrorCtrlException {
	public:
		InvalidSharedMemoryException():MirrorCtrlException("InvalidSharedMemoryException", "Impossible to attach to the shared memory") {}
		virtual ~InvalidSharedMemoryException() {}
};

/*
 * This exception is thrown in the BcuPacket::checkAndReceive if the received 
 * packet is not the expected one
 */
class UnexpectedBcuPacketException: public UdpException {
	
	public:
		explicit UnexpectedBcuPacketException(string m, uint8 msgId, BYTE* unexpectedRawPacket): UdpException(m) { exception_id = "UnexpectedBcuPacketException"; 
															   													   _unexpectedMsgId = msgId; 
															   													   _unexpectedRawPacket = unexpectedRawPacket; }
		virtual ~UnexpectedBcuPacketException() throw() {}
		
		uint8 getUnexpectedMsgId() { return _unexpectedMsgId; }
		BYTE* getUnexpectedRawPacket() { return _unexpectedRawPacket; }
		
	private:
		uint8 _unexpectedMsgId;
		BYTE* _unexpectedRawPacket;
};

#endif /*MIRRORCTRLEXCEPTIONS_H_INCLUDED*/
