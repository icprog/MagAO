#@File: msgcodes.txt

ANY_MSG       0x0        Any message code

ACK          0x10        Generic acknowledge message
NAK          0x20        Generic negative acknowledge message

REGISTER     0x1010      Registers a client. Replies with a ACK/NAK message
SETREADY     0x1020      Sets the ready flag of a client
WAITCLRDY    0x1030      Sets the client waiting for given client to become ready.
WAITCANCEL   0x1031      Cancel waiting for client ready
GETVERSION   0x1040      Request numeric version (1000*VERS_MAJOR+VERS_MINOR)
VERSREPLY    0x1041      Reply to version request
GETSTARTT    0x1044      Request client's start time
STARTREPLY   0x1045      Reply to stat time request
UNREGISTER   0x1100      Unregister client (client will then close the connection)

LOGFREEZE    0x1107      Simulate MsgD Freeze, set pLoad to freeze time (ms) (JUST FOR DEBUG PURPOSES!!!)

DUMMYMSG     0x1111      Dummy message for tests 

CLNREADY     0x2000      Notifies that the client we were waiting for is ready

# Messages between peers
CLNDISCON    0x2100      Notify that a client was disconnected
VARMIRROR    0x2110      Notify global variable change to peers (details in payload)


#            Housekeeping messages
ECHO         0x3000      Echo request
ECHOREPLY    0x3001      Reply to echo message

# The following commands must be directed to MsgD only
DUMPCLNS     0x3010      Dump client list onto log file
DUMPBUFS     0x3012      Dump buffer list onto log file
DUMPVARS     0x3013      Dump a set of variables onto log file
DUMPINFO     0x3014      Dump info about MSGD  onto log file
DUMPNOTIF    0x3015      Dump list of notify requests onto log file
DUMPVSTAT    0x3020      Dump variable table status onto log file
RQSTINFO     0x3021      Returns info about MSGD or client (thrdlib based)
HNDLINFO     0x3022      Returns info about client's handlers (thrdlib based)
INFOREPLY    0x3023      Reply to info request
CLNTLIST     0x3024      Request the list of clients. 
CLNTRPLY     0x3026      Reply to a CLNTLIST request
CLNTEND      0x3027      End of CLNTRPLY message sequence.
HAVEYOUCL    0x3028      Request if a client with given name is connected.
CLOSELOG     0x3030      Closes current log file and opens a new one
LOGCNTRL     0x3031      Selectively activate/deactivate logging on client
SETTMOUT     0x3040      Set timeout value for messages sent to clients

# The following commands must be directed to MsgD or thrdlib based applications only

LOGINCR      0x3500      Increase log level (do more logging)
LOGDECR      0x3510      Decrease log level (do less logging)
LOGLEVSET    0x3520      Set logging level (thrdlib based applications only)

#            Variable management messages
CREAVAR      0x5000      Creates a variable
SETVAR       0x5010      Sets a Variable
GETVAR       0x5020      Gets a Variable
DELVAR       0x5030      Deletes a Variable
LOCKVAR      0x5040      Lock/unlock a set of variables (spec: 1/0 in payload)
TRACEVAR     0x5042      Set/unset trace flag on var (spec: 1/0 in payload)
WRITEVAR     0x5050      Writes a variable (creates it, if not existent)
VARLIST      0x5070      Request a list of variable values
VARNOTIF     0x5080      Request/unrequest var change notification (spec: 1/0 in payload)
TAKEVAR      0x5100      Take ownership of a variable
GIVEVAR      0x5110      Give away ownership of a variable
VARCHANGD    0x5500      Notify variable change to registered clients (details in payload)
VARREPLY     0x5530      Variable value return
VAREND       0x5540      Terminates a sequence of VARREPLY
VARERROR     0x5550      Variable error return
VARLOCKD     0x5560      Variable locked error return
VARWRITN     0x5570      Variable has been written (reply to WRITEVAR)

#             // Shared buffer related messages
BUFLIST       0x6000     Request current shared buffer list

BUFREPLY      0x6500     Shared Buffer list item return
BUFEND        0x6510     Terminate e sequence of BUFREPLY

SHMCREA       0x7000     Request creation of a shared buffer
SHMREQST      0x7010     Request access to a shared buffer
SHMSNAP       0x7020     Request a burst of snapshot data
SHMDETACH     0x7030     Release access to a shared buffer

LOGSTAT       0x8000     Requires logging of error status

#             IDL server related messages
IDLCMD        0x9000     Request execution of an IDL command
IDLLOCK       0x9010     Lock request on an IDL session
IDLUNLOCK     0x9020     Remove lock from an IDL session
IDLCTRLC      0x9030     Send CtrlC command to IDL intepreter
IDLREPLY      0x9500     Output of an IDL command
IDLSETMIR     0x9501     IDL set_mirror request
IDLAPPLYMODES 0x9502     IDL apply modes request
IDLAPPLYRTR   0x9503     IDL apply rtr request
IDLINITOL     0x9504     IDL init_mirror request
IDLFLATMIR    0x9505     IDL flat request
IDLRIPMIR     0x9506     IDL init_mirror request
IDLSETRTR     0x9507     IDL set_rtr request


BCUMSG        0x10000    Generic BCU message
BCUBUFFER     0x10002    R/W msg to BCU with answer with a buffer appended to the message
RTRCONFIG     0x10003    Rtart RTR configuration

#                 MESSAGES for the NEW MirrorCtrl 
BCUMSG_39_LP  	  0x10004	 Low-priority BCU message for BCU39
BCUMSG_39_HP  	  0x10005	 High-priority BCU message for BCU39
BCUMSG_47_LP  	  0x10006	 Low-priority BCU message for BCU47
BCUMSG_47_HP  	  0x10007	 High-priority BCU message for BCU47
BCUMSG_SWITCH_LP  0x10008	 Low-priority BCU message for BCUSWITCH
BCUMSG_SWITCH_HP  0x10009	 High-priority BCU message for BCUSWITCH
BCUMSG_MIRROR_LP  0x10010	 Low-priority BCU message for BCUMIRROR
BCUMSG_MIRROR_HP  0x10011	 High-priority BCU message for BCUMIRROR


IDRIVE_SETUP     0x11000  Setup of iDrive with a command sequence file
IDRIVE_POS       0x11001  Ask position reply (command line interface)
IDRIVE_MOVETO    0x11002  Ask stage movement (command line interface)
IDRIVE_GETVALUE  0x11003  Low-level parameter read request (command line interface)
MOTOR_SAVESTATE  0x11004  Request to save motor state (to avoid homing after a power cycle)

## Messages for DiagnApps
DIAGNDUMP        	  0x12000  Serialize Diagnostic data structure to file   
DIAGNSETPARAM    	  0x12001  Modify the parameters of a set of DiagnVars in a DiagnApp      
DIAGNGETPARAM   	  0x12002  Retrieve the parameters of a set of DiagnVars from a DiagnApp     
DIAGNREPLYPARAM  	  0x12003  Reply to a DIAGNGETPARAM
DIAGNGETVALUE    	  0x12004  Retrieve the values of a set of DiagnVars from a DiagnApp
DIAGNGETBUFFER   	  0x12005  Retrieve the running mean buffers of a set of DiagnVars from a DiagnApp
DIAGNDUMPPARAMS  	  0x12006  Dump to file the parameters of all the DiagnVars of a DiagnApp
DIAGNLOADOFFLINEFRAME 0x12007  Load a frame from the offline history
DIAGNLOADPARAMS       0x12008  Load a specified set of params

## Messages for AOS
AOS_ACK          0x13000  Generic acknowledge (command was executed).
                          May return result in message body
AOS_NACK         0x13001  Generic negative acknowledge (command was not executed).
                          Returns error code in Payload field

AOS_HOUSKEEP     0x13002  Request code for housekeeping commands
                          (specification in header payload)
AOS_HXP_CMD      0x13003  Request code for hexapod control commands
                          (specification in header payload)

AOS_TEL_CMD      0x13004  Request code for telecope control commands
                          (specification in header payload)

AOS_OBSERV_CMD   0x13005  AOS master mode commands
                          (specification in header payload)

AOS_OFFLOAD      0x13006  Mode offload command

AOS_TELEMETRY    0x13007  Telemetry message
                          
## Messages to/from a generic Arbitrator
# Note that the following codes are handled by the Arbitrator Framework: the thlib handlers
# can't be overridden and dinamically bound by subclasses (since they are static!).
# To add commands/request for a sub-arbitrator define some extra codes
ARB_CMD	 		 0x14000  Request an Arbitrator to execute a COMMAND.
						  This means that the message body contains a serialized
						  object of a class derived from ArbitratorLib/Base/Command
ARB_CANC_CMD	 0x14001  Request an Arbitrator to cancel the current command.
ARB_REQ 		 0x14002  Request an Arbitrator some service different from command
						  execution (i.e. to have feedback). A request doesn't cause
						  a state change in the arbitrator's FSM, and can be executed 
						  concurrently to a command.
ARB_REPLY	 	 0x14003  Reply from Arbitrator
ARB_ALERT	     0x14004  Notify an alert to an Arbitrator.
						  This means that the message body contains a serialized
						  object of a class derived from ArbitratorLib/Base/Alert
ARB_ASYNC_CMD    0x14005  Request an Arbitrator to execute a COMMAND in
                          a different queue than the main one

## Messages for AOApp and derived
AO_SETLOGLEV     0x15000  Set the log level of a logger(s) of a AOApp
AO_GETLOGNAMELEV 0x15001  Get from an AOApp the dict of loggers' names and levels


## Messages for InterferometerCtrl
# The reply has the same message code!
INTF_COMMAND			 	0x16000		Generic msgcode used by handler
								    	(specification in header payload)
INTF_ENABLE_TRIGGER  		0x16001		Enable the external trigger		
INTF_DISABLE_TRIGGER		0x16002		Disable the external trigger	  
INTF_SET_POST_PROC_NONE  	0x16003		Set post-processing to NONE
INTF_SET_POST_PROC_HDF5  	0x16004		Set post-processing to HDF5
INTF_GET_MEAS		 	 	0x16005		Get a measurement
INTF_GET_BURST			 	0x16006		Get a burst of measurements
INTF_POST_PROC		 	 	0x16007		Ask for post-processing on existing data
INTF_CAPTURE				0x16008		Capture
INTF_PRODUCE				0x16009		Produce
INTF_DUMMY				0x16010		Dummy engineering procedure

## Messages for the MasterDiagnostic
MASTDIAGN_DUMP_ADSEC_FRAMES		0x16000  Dump to file the frames history for AdSec
MASTDIAGN_DUMP_OPTLOOP_FRAMES   0x16001  Dump to file the frames history for Optloop
MASTDIAGN_SET_DECIMATION        0x16002  Set the bouncer frame decimation
MASTDIAGN_SET_BOUNCER_ADDR      0x16003  Set the bouncer IP address and port

## Messages for the WFS arbitrator
WFSARB_CMD							0x17000 Command sent from Wfsinterface to Python server
WFSARB_ASYNC_CMD                    0x17001 Async command sent from Wfsinterface to Python server
WFS_ARB_SET_HO_POLICY				0x17002	Set the HO arm policy    (plain msgd message, no serialized object)
WFS_ARB_SET_TV_POLICY				0x17003	Set the TV arm policy    (plain msgd message, no serialized object)
WFS_ARB_SET_AND_POINT_SOURCE_POLICY 0x17004	Set the point arm policy (plain msgd message, no serialized object)
OPTSAVE                             0x17005 Optical loop data save command
OPTSAVE_REPLY                       0x17006 Optical loop data save command reply
WFS_ANTIDRIFT                       0x17007 Ccd39 drift correction

# Mirroring client
MVAR                                0x18000 Request variable mirroring

TERMINATE        0x666666  Terminate MsgD-RTDB immediately

# NOTE: max value for message code is: 16777215 (0xffffff)

