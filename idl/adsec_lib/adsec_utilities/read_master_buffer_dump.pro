;Id:
;+
; READ_MASTER_BUFFER_DUMP
;
; the function reads the content of the file generated by the master disgnostics.
; the file contains the dump of the shared memory collecting the last master diagnostic
; frames. Ouput data are organized in a vector of structures following the master diagnostic
; frame structure reported in $ADOPT_SOURCE/lib/AdsecDiagnLibStructs.h
;
; SYNTAX
;   ret = read_master_buffer_dump(filename, buffer)
;
; INPUT
;   filename: scalar string. Name of the dump file
; 
; OUTPUT
;   buffer: vector of structures containing the dumped frames. The number of structures
;           in the vactor corresponds to the number of dumped frames. The frames are
;           ordered from the least to the most recent timestamp
;
;   ret: long-int scalar. Error code. adsec_error.ok in case no error.
;
;MODIFICATION HISTORY
;  30 mar 2010, written by A. Riccardi (AR)
;-   

function read_master_buffer_dump, filename, buffer

@adsec_common

catch, ERROR_STATUS
if ERROR_STATUS ne 0 then begin
    log_print, "Parsing error occurred"
    return, -1
endif

nBcuSwitch = 1
nBcuMirror = adsec.n_crates
LB_N_SLOPES = rtr.n_slope
nDspPerBcuMirror = adsec.n_board_per_bcu*adsec.n_dsp_per_board

switch_bcu_header = {switch_bcu_header, $
  WFSFrameCounter   : 0UL, $; // counter of frames
  ParamBlockSelector: 0UL, $; // optical loop settings
  MirrorFrameCounter: 0UL, $; //
  Dummy             : 0UL $; //
} ;

switch_bcu = {switch_bcu, $
  switch_bcu_header      : switch_bcu_header, $;
  slopes                 : fltarr(LB_N_SLOPES), $; //TODO questo e' un vero dito nel culo: cambia quando alfio rebinna.
  swb_SafeSkipFrameCnt   : 0UL, $; // il numero di frames saltati perchÃ© Ã¨ fallito il check di sicurezza sui modi, comandi o correnti
  swb_PendingSkipFrameCnt: 0UL, $ ; // skipped frames because of "command pending"
  swb_WFSGlobalTimeout   : 0UL, $ ; // If switch BCU doesn't receive any WFS frame for a while,
                             $ ;  // swb_WFSGlobalTimeout is increased ( ++ for each timeout)
  swb_NumFLTimeout       : 0UL, $ ; // number of FastLink timeouts.
  swb_NumFLCrcErr        : 0UL, $ ; // number of FastLinl Crc errors.
  not_used               : ulonarr(3), $;
  accelerometer_coeffs   : fltarr(3), $; // last is not used
  TimeStamp              : 0UL, $ ; // 59.29 kHz (16.87us)
  switch_bcu_footer      : switch_bcu_header $;
};(1620 dw)

crate_bcu_header = {crate_bcu_header, $
  WFSFrameCounter   : 0UL, $; // counter of frames
  ParamBlockSelector: 0UL, $; // optical loop settings
  MirrorFrameCounter: 0UL, $; //
  CommandHistoryPtr : 0UL $; //
} ;

single_dsp_record = {single_dsp_record, $
  DistAverage      : fltarr(4), $; // Linearized position average
  CurrAverage      : fltarr(4), $; // Current average
  DistAccumulator  : ulonarr(8), $; // Accumulated linearized position
  CurrAccumulator  : ulonarr(8), $; // Accumulated current
  DistAccumulator2 : ulonarr(12), $; // Accumulated squared linearized position [2 not used]
  CurrAccumulator2 : ulonarr(12), $; // Accumulated squared current [2 not used]
  Modes            : fltarr(4), $; // Modes calculated
  NewDeltaCommand  : fltarr(4), $; // Delta command to apply
  FFCommand        : fltarr(4), $; // Delta Feed-Forward Command
  IntControlCurrent: fltarr(4), $; // Integrated Control Current
  FFPureCurrent    : fltarr(4) $; // Integrated Feed-Forward' Current
}; 

crate_bcu = {crate_bcu, $
  crate_bcu_header : crate_bcu_header, $;
  single_dsp_record: replicate(single_dsp_record, nDspPerBcuMirror), $;
  crate_bcu_footer : crate_bcu_header $;
}; (1912 dw)

data = {AdsecDiagnRaw, $
  mask      : 0UL, $;
  switch_bcu: replicate(switch_bcu, nBcuSwitch), $;
  crate_bcu : replicate(crate_bcu, nBcuMirror) $;
};

dump_header_size = 15UL*2 ;in bytes
dump_record_size = 52372UL ;in bytes, change this number in case the above structures change

finfo = file_info(filename)
if finfo.exists ne 1 then return, -1
n_records = (finfo.size-dump_header_size)/dump_record_size
buffer=replicate(temporary(data), n_records)

openr, unit, filename, /GET_LUN, ERROR=err
if err ne 0 then return, adsec_error.INVALID_FILE

aaa = bytarr(dump_header_size)
readu, unit, aaa
readu, unit, buffer
free_lun, unit

return, 0

end
