pro comp_fea_stress, nfile, nfile_modal
 
    if(N_PARAMS() ne 2) then begin
        print, 'Usage: comp_fea_stress, n_zonal_files, n_modal_files'
    print, "  In stress.basedir there must be 'display.sav' and folder 'GRID' and 'Modes'"
    print, "                      containing the fits files generated by mat2fits.m"
    print, '  n_zonal_files(in) : number of influence function in GRID folder'
    print, '  n_modal_files(in) : number of simulated modes in Modes folder'
    return
    endif

    @sigma_common
    @adsec_common

    if nfile eq 0 and nfile_modal eq 0 then  begin
        print, 'no file to process. Abort'
        return
    endif

    stress_n = 4 ;Sxt, Sxb, Syt, Syb
    
    ;restore, stress.basedir+'/display.sav', /v
    r_out    = adsec_shell.out_radius / 1000.0   ;0.120005 p45, 0.4556 lbt672
    nact     = adsec_shell.n_true_act

    ; read gridsize
    if nfile ne 0 then begin 
        ngridz=readfits(stress.basedir+'/GRID/Ngrid.fits', /SILENT)
        if array_equal(ngridz,-1) then message, 'readfits error. Abort'
    endif

    if nfile_modal ne 0 then begin 
        ngridm=readfits(stress.basedir+'/Modes/Ngrid.fits', /SILENT)
        if array_equal(ngridm,-1) then message, 'readfits error. Abort'
    endif 
 
    if nfile_modal ne 0 and nfile ne 0 then begin
        if ngridz ne ngridm then message, 'modal gridsize not equal to zonal gridsize'
        ngrid=long(ngridm[0])
    endif else begin
        if nfile eq 0 then ngrid=long(ngridm[0]) else ngrid=long(ngridz[0])
    endelse

    ; read pupil from both zonal and modal simulations
    ; take the intersection of the two
    idxpupil = lindgen(ngrid*ngrid)
    for i = 0, nfile-1 do begin
        idxpupilz=long(readfits(stress.basedir+'/GRID/Pupil_'+strtrim(i,2)+'.fits', /SILENT))
        if array_equal(idxpupilz,-1) then message, 'readfits error. Abort'
        ; need to mirror around x=y because of the passage from matlab to idl
        dum=dblarr(ngrid,ngrid) & dum[idxpupilz]=1 & dum = rotate(dum,4) & idxpupilz=where(dum eq 1)
        emp=intersection(temporary(idxpupil), idxpupilz, idxpupil)
    endfor
    for i = 0, nfile_modal-1 do begin
        idxpupilz=long(readfits(stress.basedir+'/Modes/Pupil_'+strtrim(i,2)+'.fits', /SILENT))
        if array_equal(idxpupilz,-1) then message, 'readfits error. Abort'
        ; need to mirror around x=y because of the passage from matlab to idl
        dum=dblarr(ngrid,ngrid) & dum[idxpupilz]=1 & dum = rotate(dum,4) & idxpupilz=where(dum eq 1)
        emp=intersection(temporary(idxpupil), idxpupilz, idxpupil)
    endfor

    pupilsz = n_elements(idxpupil)
    pupil = dblarr(ngrid,ngrid)
    pupil[idxpupil]=1

    i=0
    if nfile ne 0 then begin
        ; now read fits file generated by matlab FEA and fill matrices (zonal influence function)
        delta_zonal=dblarr(nfile,nact)
        sigma_zonal=dblarr(nfile,pupilsz*stress_n)
        for i = 0, nfile-1 do begin
            ; pupilla
            pupilz = readfits(stress.basedir+'/GRID/Pupil_'+strtrim(i,2)+'.fits', /SILENT)
            if array_equal(pupilz,-1) then message, 'readfits error. Abort'

            ; delta zonale
            filename = stress.basedir+'/GRID/Deltan_'+strtrim(i,2)+'.fits'
            print, filename
            a=readfits(filename, /SILENT)
            if array_equal(a,-1) then message, 'readfits error. Abort'
            delta_zonal[i,*] = a
            
            ; stress zonale
            filename = stress.basedir+'/GRID/Stress_'+strtrim(i,2)+'.fits'
            print, filename
            a=readfits(filename, /SILENT)
            if array_equal(a,-1) then message, 'readfits error. Abort'
            ; ripupillo con l'intersezione
            dummy=dblarr(ngrid,ngrid)
            for j = 0,stress_n-1 do begin
                dummy[pupilz] = a[*,j]
                dummy = rotate(dummy,4) ; need to mirror around x=y because of the passage from matlab to idl
                sigma_zonal[i,pupilsz*j: pupilsz*(j+1)-1] =dummy[idxpupil]
            endfor
        endfor
    endif
    print, 'Analyzed '+strtrim(i,2)+' zonal files'
    
    i=0
    if nfile_modal ne 0 then begin
        ; now read fits file generated by matlab FEA and fill matrices (modal influence function)
        delta_modal=dblarr(nfile_modal, nact)
        shape_modal=dblarr(nfile_modal, pupilsz)
        sigma_modal=dblarr(nfile_modal, pupilsz*stress_n)
        for i = 0, nfile_modal-1 do begin
            ; pupilla
            pupilz = readfits(stress.basedir+'/Modes/Pupil_'+strtrim(i,2)+'.fits', /SILENT)
            if array_equal(pupilz,-1) then message, 'readfits error. Abort'

            ; delta_modale
            filename = stress.basedir+'/Modes/Deltan_'+strtrim(i,2)+'.fits'
            print, filename
            a=readfits(filename, /SILENT)
            if array_equal(a,-1) then message, 'readfits error. Abort'
            dummy=dblarr(ngrid,ngrid)
            dummy[pupilz]=a
            dummy = rotate(dummy,4) ; need to mirror around x=y because of the passage from matlab to idl
            shape_modal[i,*] = dummy[idxpupil]
            delta_modal[i,*] = interpolate(dummy,stress.act_xy_px[*,0], stress.act_xy_px[*,1])

            ; stress modale
            filename = stress.basedir+'/Modes/ModalStress_'+strtrim(i,2)+'.fits'
            print, filename
            a=readfits(filename, /SILENT)
            if array_equal(a,-1) then message, 'readfits error. Abort'
            ; ripupillo con l'intersezione
            dummy=dblarr(ngrid,ngrid)
            for j = 0,stress_n-1 do begin
                dummy[pupilz] = a[*,j]
                dummy = rotate(dummy,4) ; need to mirror around x=y because of the passage from matlab to idl
                sigma_modal[i,pupilsz*j: pupilsz*(j+1)-1] =dummy[idxpupil]
            endfor
        endfor
    endif
    print, 'Analyzed '+strtrim(i,2)+' modal files'

    save, ngrid, delta_zonal, sigma_zonal, delta_modal, shape_modal, sigma_modal, $
          pupil, idxpupil, stress_n, FILE=stress.basedir+'/fea_stress.sav'

end
